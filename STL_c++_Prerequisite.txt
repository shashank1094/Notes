Iterator :
	An iterator is any object that, pointing to some element in a range of elements (such as an array or a container), has the ability to iterate through the elements of that range using a set of operators.Each container typr(such as list) has their own type of iterator to iterate over its element (pointer is also an example of iterator which can iterate over array using ++ operator).  
5 types of iterator :
1. Input
2. Forward
3. Bidirectional 
4. Random access
5. Output

a. Input and output Iterator : are of simple type, perform sequential single-pass input or output operations.
b. Forward Iterator : It has all the functionality of input iterator and they are limited to iterate in forward direction over the elements.
c. Bidirectional : It has all the functionality of forward interator and can also move in backward direction.
d. Random Access : Implement all the functionality of bidirectional iterators, and also have the ability to access ranges non-sequentially: distant elements can be accessed directly by applying an offset value to an iterator without iterating through all the elements in between. 

=====================================================================================================================================================================================
Pair in STL :
	The pair container is a simple container defined in <utility> header consisting of two data elements or objects.
Declaration :
pair <int,char> PAIR ;

1. The first element is referenced as ‘first’ and the second element as ‘second’ and the order is fixed (first, second). 
2. Pair is used to combine together two values which may be different in type. Pair provides a way to store two heterogeneous objects as a single unit. 

To access the element :
PAIR.first = 21 ; cout<<PAIR.first ;
PAIR.second = 'a' ; cout<<PAIR.second ;

To initialize a pair :
pair <string,int> PAIR2 ("example", 123);
pair <string,int> PAIR2 (PAIR1)// initialize with another pair.

Note: If not initialized, the first value of the pair gets automatically initialized(0 or NULL depends on data type).

>>>>Member function :

1.make_pair(value1,value2) : 
example :
-------------------------
int main()
{
    pair <int, char> PAIR1 ;
    pair <string, double> PAIR2 ("GeeksForGeeks", 1.23) ;
    pair <string, double> PAIR3 ;
 
    PAIR1.first = 100;
    PAIR1.second = 'G' ;
 
    PAIR3 = make_pair ("GeeksForGeeks is Best",4.56);
 
    cout << PAIR1.first << " " ;
    cout << PAIR1.second << endl ;
 
    cout << PAIR2.first << " " ;
    cout << PAIR2.second << endl ;
 
    cout << PAIR3.first << " " ;
    cout << PAIR3.second << endl ;
 
    return 0;
}
o/p :
100 G
GeeksForGeeks 1.23
GeeksForGeeks is Best 4.56
---------------------------

2. Operator(=,==,!=,<=,>=)
example :
---------------------------
#include <iostream>
#include<utility>
using namespace std;
 
int main()
{
    pair<int, int>pair1 = make_pair(1, 12);
    pair<int, int>pair2 = make_pair(9, 12);
 
 
    cout << (pair1 == pair2) << endl;
    cout << (pair1 != pair2) << endl;
    cout << (pair1 >= pair2) << endl;
    cout << (pair1 <= pair2) << endl;
    cout << (pair1 > pair2) << endl;
    cout << (pair1 < pair2) << endl;
 
    return 0;
}
o/p :
0
1
0
1
0
1
---------------------------

3. swap :
	This function swaps the contents of one pair object with the contents of another pair object. The pairs must be of same type.
Syntax :
pair<char, int>pair1 = make_pair('A', 1);
pair<char, int>pair2 = make_pair('B', 2);
pair1.swap(pair2) ;
==================================================================================================================================================================================

